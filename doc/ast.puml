@startuml AST of DSL from SC language

'!theme crt-amber
'hide circle

package ast {

    class SC {
        +fly Fly
    }
    SC --> Fly

    class Fly {
        +strand Strand
    }
    Fly --> Strand

    class Strand {
        +genome Genome[]
    }
    Strand --> Genome

    enum Genome {
        Anatomy
        Behavior
    }
    Genome --> Anatomy
    Genome --> Behavior

    enum Anatomy {
        Bug
    }
    Anatomy --> Bug

    enum Behavior {
' Statement
        Beat
' Assign
        Pollinate
' Oop
        Trace
    }
    Behavior --> Beat
    Behavior --> Pollinate
    Behavior --> Trace

    enum Beat {
' IF
        Sprout
' WHILE
        Swirl
' FOR
        Crawl
' RETURN
        Nectar
    }
    Beat --> Sprout
    Beat --> Nectar
    Beat --> Swirl
    Beat --> Crawl

    class Trace {
        +forager Forager
        +courses Course[]
    }
    Trace --> Forager
    Trace --> Course

    enum Forager {
        Specie
        Tag
        Literal
    }
    Forager --> Literal
    Forager --> Tag
    Forager --> Specie

    enum Course {
        Carrier
        Catalysis
    }
    Course --> Carrier
    Course --> Catalysis

    class Pollinate {
        +tag Tag
        +trace Trace
    }
    Pollinate --> Tag
    Pollinate --> Trace

    class Nectar {
        +trace Trace
    }
    Nectar --> Trace

    class Sprout {
        +condition Trace
        +matrix Matrix
' elsif
        +splices Splice[]
' else
        +den Matrix?
    }
    Sprout --> Trace
    Sprout --> Matrix
    Sprout --> Splice

    class Splice {
        +condition Trace
        +matrix Matrix
    }
    Splice --> Trace
    Splice --> Matrix

    class Swirl {
        +condition Trace
        +matrix Matrix
    }
    Swirl --> Trace
    Swirl --> Matrix

    class Crawl {
        +tag Tag
        +trace Trace
        +matrix Matrix
    }
    Crawl --> Tag
    Crawl --> Trace
    Crawl --> Matrix

    class Matrix {
        +signals Signal[]
    }
    Matrix --> Signal

    enum Signal {
        behavior
    }
    Signal --> Behavior

    class Catalysis {
        +tag Tag
        +carrier Carrier?
    }
    Catalysis --> Tag
    Catalysis --> Carrier

    class Carrier {
        +transport Transport?
    }
    Carrier --> Transport

    enum Transport {
        Binds
        Sequence
    }
    Transport --> Binds
    Transport --> Sequence

    class Binds {
        +binds Bind[]
    }
    Binds --> Bind

    class Bind {
        +tag Tag
        +trace Trace
    }
    Bind --> Tag
    Bind --> Trace

    class Sequence {
        +traces Trace[]
    }
    Sequence --> Trace

    class Bug {
        +specie Specie
        +genes Gene[]
        +ethics Ethics[]
    }
    Bug --> Specie
    Bug --> Gene
    Bug --> Ethics

    class Gene {
        +tag Tag
        +specie Specie
    }
    Gene --> Tag
    Gene --> Specie

    class Ethics {
        +tag Tag
        +signature Signature?
        +feedback Specie?
        +matrix Matrix?
    }
    Ethics --> Tag
    Ethics --> Signature
    Ethics --> Specie
    Ethics --> Matrix

    class Signature {
        +intakes Intake[]
    }
    Signature --> Intake

    class Intake {
        +tag Tag
        +specie Specie
    }
    Intake --> Tag
    Intake --> Specie

    enum Literal {
        Bit
        Hex
        Int
        Str
        Decimal
    }

    class Specie {
        +raw Str
    }

    class Tag {
        +raw Str
    }
}

package parser {
    class Parser
    class Tree

    Tree --> Parser
}
parser.Tree --> ast.SC

@enduml
